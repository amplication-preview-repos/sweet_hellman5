/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Comments } from "./Comments";
import { CommentsCountArgs } from "./CommentsCountArgs";
import { CommentsFindManyArgs } from "./CommentsFindManyArgs";
import { CommentsFindUniqueArgs } from "./CommentsFindUniqueArgs";
import { CreateCommentsArgs } from "./CreateCommentsArgs";
import { UpdateCommentsArgs } from "./UpdateCommentsArgs";
import { DeleteCommentsArgs } from "./DeleteCommentsArgs";
import { CommentsService } from "../comments.service";
@graphql.Resolver(() => Comments)
export class CommentsResolverBase {
  constructor(protected readonly service: CommentsService) {}

  async _commentsItemsMeta(
    @graphql.Args() args: CommentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Comments])
  async commentsItems(
    @graphql.Args() args: CommentsFindManyArgs
  ): Promise<Comments[]> {
    return this.service.commentsItems(args);
  }

  @graphql.Query(() => Comments, { nullable: true })
  async comments(
    @graphql.Args() args: CommentsFindUniqueArgs
  ): Promise<Comments | null> {
    const result = await this.service.comments(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Comments)
  async createComments(
    @graphql.Args() args: CreateCommentsArgs
  ): Promise<Comments> {
    return await this.service.createComments({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Comments)
  async updateComments(
    @graphql.Args() args: UpdateCommentsArgs
  ): Promise<Comments | null> {
    try {
      return await this.service.updateComments({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Comments)
  async deleteComments(
    @graphql.Args() args: DeleteCommentsArgs
  ): Promise<Comments | null> {
    try {
      return await this.service.deleteComments(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
