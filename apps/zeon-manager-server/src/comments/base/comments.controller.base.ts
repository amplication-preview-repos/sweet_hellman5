/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommentsService } from "../comments.service";
import { CommentsCreateInput } from "./CommentsCreateInput";
import { Comments } from "./Comments";
import { CommentsFindManyArgs } from "./CommentsFindManyArgs";
import { CommentsWhereUniqueInput } from "./CommentsWhereUniqueInput";
import { CommentsUpdateInput } from "./CommentsUpdateInput";

export class CommentsControllerBase {
  constructor(protected readonly service: CommentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Comments })
  async createComments(
    @common.Body() data: CommentsCreateInput
  ): Promise<Comments> {
    return await this.service.createComments({
      data: data,
      select: {
        author: true,
        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Comments] })
  @ApiNestedQuery(CommentsFindManyArgs)
  async commentsItems(@common.Req() request: Request): Promise<Comments[]> {
    const args = plainToClass(CommentsFindManyArgs, request.query);
    return this.service.commentsItems({
      ...args,
      select: {
        author: true,
        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Comments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async comments(
    @common.Param() params: CommentsWhereUniqueInput
  ): Promise<Comments | null> {
    const result = await this.service.comments({
      where: params,
      select: {
        author: true,
        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Comments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateComments(
    @common.Param() params: CommentsWhereUniqueInput,
    @common.Body() data: CommentsUpdateInput
  ): Promise<Comments | null> {
    try {
      return await this.service.updateComments({
        where: params,
        data: data,
        select: {
          author: true,
          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Comments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteComments(
    @common.Param() params: CommentsWhereUniqueInput
  ): Promise<Comments | null> {
    try {
      return await this.service.deleteComments({
        where: params,
        select: {
          author: true,
          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
